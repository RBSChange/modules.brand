<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<!-- Brand spaces panel. -->
	<binding id="brand_spaces" extends="layout.cDocumentEditor#cDocumentEditorPanelProperties">
		<implementation>
			<constructor><![CDATA[
			]]></constructor>

			<field name="mFieldNames">['spacesJSON']</field>
			
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						action: 'LoadSpaces',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>

			<method name="newSpace">
				<body><![CDATA[
					var brandId = this.documentEditor.documentid;
					var uri = ['brand', 'createSpaceForBrand', 'modules_brand_space', brandId].join(',');
					openActionUri(uri);
				]]></body>
			</method>
			
			<property name="modified">
				<getter><![CDATA[
					return false;
				]]></getter>
				<setter><![CDATA[
				]]></setter>
			</property>
		</implementation>
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:hbox anonid="action-bar">
					<xul:button anonid="new_space" oncommand="newSpace()" label="${trans:m.brand.bo.doceditor.button.new-space,ucf,attr}" image="{IconsBase}/small/add.png"/>
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:cfield name="spacesJSON" id="brand_brand_spacesJSON" anonid="field_spacesJSON" fieldtype="namedgridlist" flex="1" />
					<xul:spacer flex="1" />
				</xul:scrollbox>
			</xul:vbox>
		</content>
	</binding>

	<binding id="cSpacesGrid" extends="widgets.cGrid#cAbstractGrid">
		<implementation>
			<field name="mModule">null</field>
		
			<constructor><![CDATA[
				var pn = this.parentNode;
				while(pn && pn.tagName != "wmodule")
				{
					pn = pn.parentNode;
				}
				this.mModule = pn;
			
				this.fireEvent('gridInitialised');
			]]></constructor>

			<method name="getDocumentEditor">
				<parameter name="datarow" />
				<body><![CDATA[
					var pn = this.parentNode;
					while (pn && pn.localName != 'cdocumenteditor')
					{
						pn = pn.parentNode;
					}
					return pn;
				]]></body>
			</method>

			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['brand', 'openDocument', rowData.editorModel, rowData.id].join(',');
					var fromuri = ['brand', 'openDocument', rowData.brandEditorModel, rowData.brandId, 'spaces'].join(',');
					openActionUri(uri, fromuri);
				]]></body>
			</method>
			
			<method name="execute_delete">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (confirm("${trans:m.brand.bo.general.confirm-delete-space,ucf,js}"))
					{
						var me = this;
						var callBack = function(result) {
							var dataset = me.buildDataset();
							if (dataset.length > 0)
							{
								me.updateDataset(dataset.filter(function(row, indice, ds){return row !== rowData}));
							};
						};
						wCore.executeJSON('brand', 'DeleteJSON', {cmpref: rowData.id, lang: Context.W_LANG}, callBack, true);
					}
				]]></body>
			</method>
			
			<method name="execute_locate">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					locateDocumentInModule(rowData.topicId, 'website');
				]]></body>
			</method>
			
			<method name="execute_initDefaultStructure">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					try
					{
						var module = this.mModule;
						var documentId = rowData.id;
						var topicId = rowData.topicId;
						var lang = module.getContextLang();
						var callback = function (attributes) {
							return wCore.executeJSON('website', 'InitializeStructure', { cmpref: documentId, moduleName: 'brand', scriptName: 'spaceDefaultStructure', attributes: attributes, lang: lang }, null, true);
						};
						getController().openModalDialog(this, 'InitializeStructure', { documentId: documentId, pageContainerId: topicId, module: module, callback: callback });
					}
					catch (e)
					{
						wCore.error('catalog.initDefaultStructure', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled" style="padding-left: 5px;padding-right: 5px;">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows>
					<xul:row class="head" anonid="head-row">
						<xul:label name="status" value="" />
						<xul:label name="path" value="${trans:m.brand.bo.doceditor.spaces.path-column,ucf,attr}" />
						<xul:label name="actionrow" value="${trans:m.brand.bo.doceditor.spaces.actions-column,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document orderable" hidden="true">
				<xul:cpublicationcell value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="${trans:m.uixul.bo.actions.edit,ucf,attr}" />
					<xul:toolbarbutton action="locate" image="{IconsBase}/small/topic.png" tooltiptext="${trans:m.brand.bo.actions.locate-related-topic,ucf,attr}" />
					<xul:toolbarbutton action="initDefaultStructure" image="{IconsBase}/small/add.png" tooltiptext="${trans:m.brand.bo.actions.generate-default-structure,ucf,attr}" />
					<xul:toolbarbutton action="delete" image="{IconsBase}/small/delete.png" tooltiptext="${trans:m.uixul.bo.actions.delete,ucf,attr}" />
				</xul:toolbar>
			</xul:row>
		</content>
	</binding>
</bindings>